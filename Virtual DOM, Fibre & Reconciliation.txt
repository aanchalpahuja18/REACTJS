Virtual DOM, Fibre & Reconciliation

https://github.com/acdlite/react-fiber-architecture

React.createRoot creates a DOM like structure similar to browser BTS bcoz it compares the virtual DOM and the actual DOM together and make updates the UI only in that part in which the change has occurred.


Here is the takeaway from the video
/* 
1.The createRoot create's its own DOM and then compare it with the web browser's DOM and only update those components which are actually updated.
2.But the browser removes the whole DOM and then recrates the whole DOM with the updated values this is called reload.
3. However virtual DOM tracks whole DOM like a tree like structure and updates only those values which were only changed.
4. But some values depends on network call so if we update a value it might get update immediately via a network call.
5. So we will have to update it again. To avoid this overhead we can drop the updation calls for the immediate value update.
6. The current algo used by the React is called the React Fibre algo.
7. The algo react uses to differentiate the web browser's tree and React's tree formed through create root is called reconciliation.
8. Reconciliation is the algo behind what popularly known as the Virtual-DOM.
9.In UI it is not necessary for every update to be applied immediately. */


My Key Takeaways - 13-6-24

1. createRoot() creates its own DOM like structure same as browser & then updates only those things which has been updated in the UI.
2. Browser firse pura ka pura DOM recreate krta hai on 1 change.
3. Updates in UI needs to be checked & done after waiting for a while which creates an optimized algo since agar baar baar UI m update krege to if network par UI dependant hai to bht saare UI updation ke calls lagane padege & it will become a costly process.
4. Virtual DOM ko update krne vali algo hai React Fiber.
5. Reconcilation - The algorithm React uses to diff one tree with another to determine which parts need to be changed.
6. Reconciliation is the algorithm behind what is popularly understood as the "virtual DOM."